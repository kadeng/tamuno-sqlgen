package org.tamuno.sqlgen.test.results;

import org.tamuno.runtime.sql.*;
import org.tamuno.annotations.Generated;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.io.Serializable;
/** SQL Code Generator class
 * generated from C:\Users\kailondenberg\Projekte\ds_webdev_workshop\java_examples\sqlgen\src\test\java\org\tamuno\sqlgen\test\input\SQLCode.sqlg
 * please do not edit this file by hand.
 */
@Generated( from="C:\\Users\\kailondenberg\\Projekte\\ds_webdev_workshop\\java_examples\\sqlgen\\src\\test\\java\\org\\tamuno\\sqlgen\\test\\input\\SQLCode.sqlg")
public class SQLCode extends BaseSQLApi { 

protected Executor executor;

	public SQLCode() {
		super();
		this.executor = new Executor();
	}
	public SQLCode(Executor executor) {
		this.executor = executor;
	}
	// Start of code for selectUserLogin
	/** 
	 * selectUserLogin:=
	 *     SELECT @user_id:int, @user_name:String, @birthdate:Date 
	 *         FROM users 
	 *         WHERE 
	 *             user_name=$user_name AND password_hash=md5($password) 
	 *         LIMIT 1;
	 */
	public  class SelectUserLogin implements Cloneable, Serializable {
		public String user_name = null;
		public String password = null;

		public long calcAvailableParamsBitset() {
			long result = 0L;
			if (user_name!=null) {
				result |= 1L;
			}
			if (password!=null) {
				result |= 2L;
			}
			return result;
		}

		public SelectUserLogin user_name(String value) {
			user_name = value;
			return this;
		}

		public SelectUserLogin password(String value) {
			password = value;
			return this;
		}

		public int execute() throws SQLException {
			return this.execute(connectionProvider.getConnection().createStatement());
		}

		public int execute(java.sql.Statement st) throws SQLException {
			return executor.executeUpdate(st, this);
		}

		public RowIterator<SelectUserLoginRow> query() throws SQLException {
			return this.query(connectionProvider.getConnection().createStatement());
		}

		public RowIterator<SelectUserLoginRow> query(java.sql.Statement st) throws SQLException {
			return new RowIterator<SelectUserLoginRow>(executor.executeQuery(st, this), SelectUserLoginRow.class);
		}

		public  String toString() {
			long available = this.calcAvailableParamsBitset();
			if ((available & 3L)!=3L) {
				throw new IllegalArgumentException("Missing required arguments");
			}
			StringBuilder result = new StringBuilder();
			boolean combine = false;
			result.append("SELECT ");
			result.append("user_id");
			result.append(", ");
			result.append("user_name");
			result.append(", ");
			result.append("birthdate");
			result.append(" \n        FROM users \n        WHERE \n            user_name=");
			result.append(sqlDialectUtil.escapeValue(this.user_name));
			result.append(" AND password_hash=md5(");
			result.append(sqlDialectUtil.escapeValue(this.password));
			result.append(") \n        LIMIT 1");
			combine = true;
			return result.toString();
		}

	}
	

	public SelectUserLogin selectUserLogin() {
		return new SelectUserLogin();
	}

	public SelectUserLogin selectUserLogin(String user_name, String password) {
		SelectUserLogin result = new SelectUserLogin();
		result.user_name=user_name;
		result.password=password;
		return result;
	}


	public static class SelectUserLoginRow implements TypedRow, Cloneable, Serializable {
		public int user_id;
		public String user_name;
		public java.sql.Date birthdate;

		public void loadResultSetRow(java.sql.ResultSet rs) throws java.sql.SQLException {
			user_id=rs.getInt(1);
			user_name=rs.getString(2);
			birthdate=rs.getDate(3);
		}

		public Object clone() {
			try {
				return super.clone();
			} catch (CloneNotSupportedException cns) {
				cns.printStackTrace();
				return null;
			}
		}

	}


	// End of code for selectUserLogin

	// Start of code for selectUser
	/** 
	 * selectUser:=
	 *     SELECT @user_id:int, ';' @user_name:String, @birthdate:Date 
	 *         FROM users 
	 *             [ WHERE 
	 *                 [user_name=$user_name] [AND] [active=$active:int]
	 *             ] 
	 *         LIMIT 1;
	 */
	public  class SelectUser implements Cloneable, Serializable {
		public String user_name = null;
		public Integer active = null;

		public long calcAvailableParamsBitset() {
			long result = 0L;
			if (user_name!=null) {
				result |= 1L;
			}
			if (active!=null) {
				result |= 2L;
			}
			return result;
		}

		public SelectUser user_name(String value) {
			user_name = value;
			return this;
		}

		public SelectUser active(Integer value) {
			active = value;
			return this;
		}

		public int execute() throws SQLException {
			return this.execute(connectionProvider.getConnection().createStatement());
		}

		public int execute(java.sql.Statement st) throws SQLException {
			return executor.executeUpdate(st, this);
		}

		public RowIterator<SelectUserRow> query() throws SQLException {
			return this.query(connectionProvider.getConnection().createStatement());
		}

		public RowIterator<SelectUserRow> query(java.sql.Statement st) throws SQLException {
			return new RowIterator<SelectUserRow>(executor.executeQuery(st, this), SelectUserRow.class);
		}

		public  String toString() {
			long available = this.calcAvailableParamsBitset();
			StringBuilder result = new StringBuilder();
			boolean combine = false;
			result.append("SELECT ");
			result.append("user_id");
			result.append(", ';' ");
			result.append("user_name");
			result.append(", ");
			result.append("birthdate");
			result.append(" \n        FROM users \n            ");
			if ((available & 3L)!=0L) {
				StringBuilder subResult1 = new StringBuilder();
				boolean altFlag1 = false;
				boolean combine1 = false;
				subResult1.append(" WHERE \n                ");
				if ((available & 1L)==1L) {
					altFlag1=true;
					subResult1.append("user_name=");
					subResult1.append(sqlDialectUtil.escapeValue(this.user_name));
					combine1 = true;
				}
				subResult1.append(" ");
				 if ((combine1) && ((available & 2L)==2L)) {
					subResult1.append("AND");
					combine1 = false;
				}
				subResult1.append(" ");
				if ((available & 2L)==2L) {
					altFlag1=true;
					subResult1.append("active=");
					subResult1.append(sqlDialectUtil.escapeValue(this.active));
					combine1 = true;
				}
				subResult1.append("\n            ");
				if (altFlag1) {
					result.append(subResult1);
					combine = true;
				}
			}
			result.append(" \n        LIMIT 1");
			combine = true;
			return result.toString();
		}

	}
	

	public SelectUser selectUser() {
		return new SelectUser();
	}

	public SelectUser selectUser(String user_name, Integer active) {
		SelectUser result = new SelectUser();
		result.user_name=user_name;
		result.active=active;
		return result;
	}


	public static class SelectUserRow implements TypedRow, Cloneable, Serializable {
		public int user_id;
		public String user_name;
		public java.sql.Date birthdate;

		public void loadResultSetRow(java.sql.ResultSet rs) throws java.sql.SQLException {
			user_id=rs.getInt(1);
			user_name=rs.getString(2);
			birthdate=rs.getDate(3);
		}

		public Object clone() {
			try {
				return super.clone();
			} catch (CloneNotSupportedException cns) {
				cns.printStackTrace();
				return null;
			}
		}

	}


	// End of code for selectUser

public static class Executor extends BaseSQLExecutor {



	protected int executeUpdate(Statement st, SelectUserLogin sql) throws SQLException {
		return executeUpdate(st, (Object) sql);
	}

	protected ResultSet executeQuery(Statement st, SelectUserLogin sql) throws SQLException{
		return executeQuery(st, (Object) sql);
	}



	protected int executeUpdate(Statement st, SelectUser sql) throws SQLException {
		return executeUpdate(st, (Object) sql);
	}

	protected ResultSet executeQuery(Statement st, SelectUser sql) throws SQLException{
		return executeQuery(st, (Object) sql);
	}


}

}
